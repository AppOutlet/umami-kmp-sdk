{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#umami-kotlin","title":"Umami Kotlin","text":"<p>Welcome to the official documentation for <code>umami-kotlin</code>, a simple and powerful library for adding privacy-first analytics to your Kotlin applications.</p> <p>This open-source library makes it easy to interact with the excellent, privacy-focused Umami analytics platform. While born from the need for a unified solution in Kotlin Multiplatform, its JVM target makes it fully compatible with any server-side framework (like Ktor or SpringBoot) and even traditional Java applications.</p>"},{"location":"#at-a-glance","title":"At a Glance","text":"<p>Adding analytics to your Kotlin project is simple. Here\u2019s a quick look:</p> <pre><code>// Add the dependency in your commonMain build.gradle.kts file\ncommonMain.dependencies {\n    implementation(\"dev.appoutlet:umami:LATEST_VERSION\")\n}\n\n// Initialize the Umami instance with your server URL and website ID\nval umami = Umami.create(website = \"your-website-id\")\n\n// Track a custom event\nfun whenSomethingHappens() {\n    umami.event(url = \"/screen/main\", name = \"app-launch\")\n}\n</code></pre>"},{"location":"#core-philosophy","title":"Core Philosophy","text":"<ul> <li>\ud83d\udc8e Truly Multiplatform: Write your analytics code once and run it everywhere\u2014Android, iOS, Desktop, server-side (Ktor, SpringBoot, etc.), and any other Java or Kotlin/JVM project.</li> <li>\ud83d\ude80 Lightweight &amp; Simple: A clean, intuitive API. No complex setup, no boilerplate. Just simple function calls designed to get out of your way.</li> <li>\ud83d\udd12 Privacy-Focused: Integrate a powerful analytics tool without compromising your users' data or your principles.</li> </ul>"},{"location":"#ready-to-start","title":"Ready to Start?","text":"<p>Dive into our Get Started guide to add <code>umami-kotlin</code> to your project and track your first event in minutes. Or, if you want to see the source code, check out the project on GitHub.</p> <p>Get Started   View on GitHub </p> <p></p>"},{"location":"#a-project-by-appoutlet","title":"A Project by AppOutlet","text":"<p><code>umami-kotlin</code> is developed and maintained by AppOutlet. You can explore our other projects on our website.</p>"},{"location":"event-tracking/","title":"Event tracking","text":"<p>Once you have configured the <code>Umami</code> client, you can begin tracking user interactions. <code>umami-kotlin</code> provides a straightforward API for sending analytics data to your Umami instance asynchronously, ensuring that tracking calls never block your application's main thread.</p> <p>If you haven't already, please refer to the Get Started guide to set up the <code>Umami</code> client in your project.</p> <p>The library offers two primary functions for this purpose:</p> <ul> <li><code>event()</code>: Used to track page views and custom events. This will be your most commonly used function.</li> <li><code>identify()</code>: Used to send specific data to identify a user and create a new session. (optional)</li> </ul>"},{"location":"event-tracking/#tracking-page-views-and-custom-events","title":"Tracking Page Views and Custom Events","text":"<p>The <code>event()</code> function is the universal method for sending most tracking data. You can use it to record a simple page view, a specific user interaction (like a button click), or both at the same time.</p> <pre><code>suspend fun event(\n    referrer: String? = null,\n    title: String? = null,\n    url: String? = null,\n    name: String? = null,\n    data: Map&lt;String, Any&gt;? = null,\n    tag: String? = null,\n    timestamp: Long = now(),\n    id: String? = null\n)\n</code></pre>"},{"location":"event-tracking/#parameters","title":"Parameters","text":"<ul> <li><code>referrer</code> (String): The URL of the page that referred the user to the current page.</li> <li><code>title</code> (String): The title of the page being viewed.</li> <li><code>url</code> (String): The URL of the page. This is the primary field for tracking a page view.</li> <li><code>name</code> (String): The name of the custom event. This is the primary field for tracking a custom event.</li> <li><code>data</code> (Map): A map of additional, custom data to associate with the event.</li> <li><code>tag</code> (String): A tag to categorize the event.</li> <li><code>timestamp</code> (Long): The timestamp of when the event occurred, in seconds since the epoch. Defaults to the current time.</li> <li><code>id</code> (String): A unique identifier for the event.</li> </ul> <p>Info</p> <p>Please refer to the full event method specification for more details.</p>"},{"location":"event-tracking/#usage-examples","title":"Usage Examples","text":"<p>1. Tracking a Page View To track a page view, provide a <code>url</code> and an optional <code>title</code>.</p> <pre><code>// Track a user navigating to the \"Settings\" screen\numami.event(url = \"/settings\", title = \"User Settings\")\n</code></pre> <p>2. Tracking a Custom Event To track a specific interaction, like a user clicking a button, provide a <code>name</code>. You can also include custom <code>data</code> for more context.</p> <pre><code>// Track a user completing a purchase\numami.event(\n    name = \"purchase-completed\",\n    data = mapOf(\n        \"plan\" to \"premium\",\n        \"price\" to 49.99\n    )\n)\n</code></pre>"},{"location":"event-tracking/#identifying-a-user","title":"Identifying a User","text":"<p>The <code>identify()</code> function is a specialized method used to associate custom data with the current user's session. This is useful for enriching your analytics with session-specific information.</p> <pre><code>suspend fun identify(\n    data: Map&lt;String, Any&gt;,\n    timestamp: Long = now(),\n    id: String? = null\n)\n</code></pre>"},{"location":"event-tracking/#parameters_1","title":"Parameters","text":"<ul> <li><code>data</code> (Map): The map of custom data you want to associate with the user's session.</li> <li><code>timestamp</code> (Long): The timestamp of when the identification occurred. Defaults to the current time.</li> <li><code>id</code> (String): A unique identifier for the event.</li> </ul> <p>Info</p> <p>Please refer to the full identify method specification for more details.</p>"},{"location":"event-tracking/#usage-example","title":"Usage Example","text":"<pre><code>// Identify the user with their account type after they log in\numami.identify(data = mapOf(\"account_type\" to \"pro_user\"))\n</code></pre>"},{"location":"event-tracking/#asynchronous-processing","title":"Asynchronous Processing","text":"<p>It's important to understand that all event tracking in <code>umami-kotlin</code> is handled asynchronously. When you call <code>event()</code> or <code>identify()</code>, the payload is not sent to the network immediately on the calling thread.</p> <p>Instead, the event is placed into an internal queue (a Kotlin <code>Channel</code>). A dedicated background process consumes items from this queue one by one and sends them to the Umami server.</p> <p>This design ensures that your analytics calls are non-blocking and have a minimal performance impact on your application, which is especially critical for maintaining a responsive UI on the main thread.</p>"},{"location":"event-tracking/#a-note-on-future-updates","title":"A Note on Future Updates","text":"<p>Currently, events are processed sequentially. Batch processing of events (sending multiple events in a single network request) is a planned future enhancement to further improve network efficiency.</p>"},{"location":"get-started/","title":"Getting started","text":"<p>Welcome! This guide will walk you through the essential steps to install <code>umami-kotlin</code>, configure the client, and send your first event. You'll be up and running in just a few minutes.</p>"},{"location":"get-started/#step-1-add-the-dependency","title":"Step 1: Add the Dependency","text":"<p>First, you need to add <code>umami-kotlin</code> to your project. The library is hosted on Maven Central.</p> <p></p> <p>Add the following to your <code>build.gradle.kts</code> file's <code>dependencies</code> block. Make sure to use the latest version number shown in the badge above.</p> MultiplatformSingle platform (Kotlin/JVM, Android, etc.) composeApp/build.gradle.kts<pre><code>// In your commonMain dependencies\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"dev.appoutlet:umami:LATEST_VERSION\")\n        }\n    }\n}\n</code></pre> app/build.gradle.kts<pre><code>// In your module dependencies\ndependencies {\n    implementation(\"dev.appoutlet:umami:LATEST_VERSION\")\n}\n</code></pre>"},{"location":"get-started/#step-2-create-and-configure-the-client","title":"Step 2: Create and Configure the Client","text":"<p>Next, you need to create an instance of the <code>Umami</code> client. This object will handle all communication with the Umami API.</p> <p>It's highly recommended to create this as a singleton in your project's dependency injection setup (see our Recipes section for examples).</p> <p>To create it, use the <code>Umami.create()</code> factory method:</p> <pre><code>val umami = Umami.create(\n    website = \"your-website-id\",\n    // The `baseUrl` is optional. It defaults to the Umami Cloud if not provided.\n    baseUrl = \"https://your-umami-instance.com\" // Only needed for self-hosted\n)\n</code></pre> <p>You'll need your Website ID from your Umami dashboard. If you're self-hosting Umami, you must also provide your instance's URL to the <code>baseUrl</code> parameter.</p>"},{"location":"get-started/#step-3-track-your-first-event","title":"Step 3: Track Your First Event","text":"<p>With the client configured, you're ready to track an event!</p> <p>Here is a complete, runnable example:</p> <pre><code>fun trackMyFirstEvent() {\n    val umami = Umami.create(website = \"your-website-id\")\n\n    // Let's track a page view for a user opening the app's home screen\n    umami.event(url = \"/home\", title = \"Home Screen\")\n\n    println(\"First event tracked!\")\n}\n</code></pre> <p>This code initializes the client and sends a simple page view event. You can also track custom events by providing a <code>name</code> to the <code>event()</code> function. It's that simple!</p> <p>The events are processed asynchronously backed by a Channel and the HTTP requests are made out of the main thread, so you can call this from anywhere in your application without blocking the UI or main thread. More details about event tracking on the event tracking page.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This document outlines the current development status and future plans for the Umami API. It is intended for developers who are using or contributing to this library.</p>"},{"location":"roadmap/#umami-api","title":"Umami API","text":"<ul> <li> Send tracking event data - <code>POST /api/send</code></li> <li> Login user - <code>POST /api/auth/login</code></li> <li> Verify authentication token - <code>POST /api/auth/verify</code></li> <li> Get all users (admin) - <code>GET /api/admin/users</code></li> <li> Get user details - <code>GET /api/users/:userId</code></li> <li> Update user details - <code>POST /api/users/:userId</code></li> <li> Delete user - <code>DELETE /api/users/:userId</code></li> <li> Get websites for a user - <code>GET /api/users/:userId/websites</code></li> <li> Get teams for a user - <code>GET /api/users/:userId/teams</code></li> <li> Create a new team - <code>POST /api/teams</code></li> <li> Join an existing team - <code>POST /api/teams/join</code></li> <li> Get team details - <code>GET /api/teams/:teamId</code></li> <li> Update team details - <code>POST /api/teams/:teamId</code></li> <li> Delete team - <code>DELETE /api/teams/:teamId</code></li> <li> Get users in a team - <code>GET /api/teams/:teamId/users</code></li> <li> Add user to a team - <code>POST /api/teams/:teamId/users</code></li> <li> Get specific user in a team - <code>GET /api/teams/:teamId/users/:userId</code></li> <li> Update user role/permissions in a team - <code>POST /api/teams/:teamId/users/:userId</code></li> <li> Remove user from a team - <code>DELETE /api/teams/:teamId/users/:userId</code></li> <li> Get websites for a team - <code>GET /api/teams/:teamId/websites</code></li> <li> Get events for a website - <code>GET /api/websites/:websiteId/events</code></li> <li> Get detailed event data for a website - <code>GET /api/websites/:websiteId/event-data/events</code></li> <li> Get fields for event data of a website - <code>GET /api/websites/:websiteId/event-data/fields</code></li> <li> Get values for event data fields of a website - <code>GET /api/websites/:websiteId/event-data/values</code></li> <li> Get statistics for event data of a website - <code>GET /api/websites/:websiteId/event-data/stats</code></li> <li> Get sessions for a website - <code>GET /api/websites/:websiteId/sessions</code></li> <li> Get statistics for sessions of a website - <code>GET /api/websites/:websiteId/sessions/stats</code></li> <li> Get details for a specific session - <code>GET /api/websites/:websiteId/sessions/:sessionId</code></li> <li> Get activity for a specific session - <code>GET /api/websites/:websiteId/sessions/:sessionId/activity</code></li> <li> Get properties for a specific session - <code>GET /api/websites/:websiteId/sessions/:sessionId/properties</code></li> <li> Get properties for session data of a website - <code>GET /api/websites/:websiteId/session-data/properties</code></li> <li> Get values for session data properties - <code>GET /api/websites/:websiteId/session-data/values</code></li> <li> Get all websites - <code>GET /api/websites</code></li> <li> Create a new website - <code>POST /api/websites</code></li> <li> Get website details - <code>GET /api/websites/:websiteId</code></li> <li> Update website details - <code>POST /api/websites/:websiteId</code></li> <li> Delete website - <code>DELETE /api/websites/:websiteId</code></li> <li> Reset website data - <code>POST /api/websites/:websiteId/reset</code></li> <li> Get active user count for a website - <code>GET /api/websites/:websiteId/active</code></li> <li> Get events for a website (Note: duplicate) - <code>GET /api/websites/:websiteId/events</code></li> <li> Get pageviews for a website - <code>GET /api/websites/:websiteId/pageviews</code></li> <li> Get metrics for a website - <code>GET /api/websites/:websiteId/metrics</code></li> <li> Get summary statistics for a website - <code>GET /api/websites/:websiteId/stats</code></li> </ul>"}]}